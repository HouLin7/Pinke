package com.gome.core.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gome.work.core.model.UserInfo;
import com.gome.work.core.model.converter.AppDetailScrConverter;
import com.gome.work.core.model.converter.UserDetailBeanConverter;
import java.util.List;

import com.gome.work.core.model.appmarket.AppItemBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APP_ITEM_BEAN".
*/
public class AppItemBeanDao extends AbstractDao<AppItemBean, Long> {

    public static final String TABLENAME = "APP_ITEM_BEAN";

    /**
     * Properties of entity AppItemBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AppSecret = new Property(1, String.class, "appSecret", false, "APP_SECRET");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property CategoryName = new Property(3, String.class, "categoryName", false, "CATEGORY_NAME");
        public final static Property CategoryCode = new Property(4, String.class, "categoryCode", false, "CATEGORY_CODE");
        public final static Property AppId = new Property(5, String.class, "appId", false, "APP_ID");
        public final static Property IconUrl = new Property(6, String.class, "iconUrl", false, "ICON_URL");
        public final static Property IsShowTitle = new Property(7, boolean.class, "isShowTitle", false, "IS_SHOW_TITLE");
        public final static Property PortalUrl = new Property(8, String.class, "portalUrl", false, "PORTAL_URL");
        public final static Property Type = new Property(9, int.class, "type", false, "TYPE");
        public final static Property ImgUrl = new Property(10, String.class, "imgUrl", false, "IMG_URL");
        public final static Property Sort = new Property(11, int.class, "sort", false, "SORT");
        public final static Property Score = new Property(12, int.class, "score", false, "SCORE");
        public final static Property Introduce = new Property(13, String.class, "introduce", false, "INTRODUCE");
        public final static Property ScreenshotUrls = new Property(14, String.class, "screenshotUrls", false, "SCREENSHOT_URLS");
        public final static Property HotCount = new Property(15, String.class, "hotCount", false, "HOT_COUNT");
        public final static Property CommentCount = new Property(16, String.class, "commentCount", false, "COMMENT_COUNT");
        public final static Property PraiseCount = new Property(17, String.class, "praiseCount", false, "PRAISE_COUNT");
        public final static Property HelperUser = new Property(18, String.class, "helperUser", false, "HELPER_USER");
        public final static Property HomePageUrl = new Property(19, String.class, "homePageUrl", false, "HOME_PAGE_URL");
        public final static Property IsForceVerify = new Property(20, String.class, "isForceVerify", false, "IS_FORCE_VERIFY");
        public final static Property BadgeCount = new Property(21, String.class, "badgeCount", false, "BADGE_COUNT");
        public final static Property DeveloperUser = new Property(22, String.class, "developerUser", false, "DEVELOPER_USER");
    }

    private final AppDetailScrConverter screenshotUrlsConverter = new AppDetailScrConverter();
    private final UserDetailBeanConverter helperUserConverter = new UserDetailBeanConverter();
    private final UserDetailBeanConverter developerUserConverter = new UserDetailBeanConverter();

    public AppItemBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AppItemBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP_ITEM_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"APP_SECRET\" TEXT," + // 1: appSecret
                "\"NAME\" TEXT," + // 2: name
                "\"CATEGORY_NAME\" TEXT," + // 3: categoryName
                "\"CATEGORY_CODE\" TEXT," + // 4: categoryCode
                "\"APP_ID\" TEXT UNIQUE ," + // 5: appId
                "\"ICON_URL\" TEXT," + // 6: iconUrl
                "\"IS_SHOW_TITLE\" INTEGER NOT NULL ," + // 7: isShowTitle
                "\"PORTAL_URL\" TEXT," + // 8: portalUrl
                "\"TYPE\" INTEGER NOT NULL ," + // 9: type
                "\"IMG_URL\" TEXT," + // 10: imgUrl
                "\"SORT\" INTEGER NOT NULL ," + // 11: sort
                "\"SCORE\" INTEGER NOT NULL ," + // 12: score
                "\"INTRODUCE\" TEXT," + // 13: introduce
                "\"SCREENSHOT_URLS\" TEXT," + // 14: screenshotUrls
                "\"HOT_COUNT\" TEXT," + // 15: hotCount
                "\"COMMENT_COUNT\" TEXT," + // 16: commentCount
                "\"PRAISE_COUNT\" TEXT," + // 17: praiseCount
                "\"HELPER_USER\" TEXT," + // 18: helperUser
                "\"HOME_PAGE_URL\" TEXT," + // 19: homePageUrl
                "\"IS_FORCE_VERIFY\" TEXT," + // 20: isForceVerify
                "\"BADGE_COUNT\" TEXT," + // 21: badgeCount
                "\"DEVELOPER_USER\" TEXT);"); // 22: developerUser
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP_ITEM_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AppItemBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String appSecret = entity.getAppSecret();
        if (appSecret != null) {
            stmt.bindString(2, appSecret);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String categoryName = entity.getCategoryName();
        if (categoryName != null) {
            stmt.bindString(4, categoryName);
        }
 
        String categoryCode = entity.getCategoryCode();
        if (categoryCode != null) {
            stmt.bindString(5, categoryCode);
        }
 
        String appId = entity.getAppId();
        if (appId != null) {
            stmt.bindString(6, appId);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(7, iconUrl);
        }
        stmt.bindLong(8, entity.getIsShowTitle() ? 1L: 0L);
 
        String portalUrl = entity.getPortalUrl();
        if (portalUrl != null) {
            stmt.bindString(9, portalUrl);
        }
        stmt.bindLong(10, entity.getType());
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(11, imgUrl);
        }
        stmt.bindLong(12, entity.getSort());
        stmt.bindLong(13, entity.getScore());
 
        String introduce = entity.getIntroduce();
        if (introduce != null) {
            stmt.bindString(14, introduce);
        }
 
        List screenshotUrls = entity.getScreenshotUrls();
        if (screenshotUrls != null) {
            stmt.bindString(15, screenshotUrlsConverter.convertToDatabaseValue(screenshotUrls));
        }
 
        String hotCount = entity.getHotCount();
        if (hotCount != null) {
            stmt.bindString(16, hotCount);
        }
 
        String commentCount = entity.getCommentCount();
        if (commentCount != null) {
            stmt.bindString(17, commentCount);
        }
 
        String praiseCount = entity.getPraiseCount();
        if (praiseCount != null) {
            stmt.bindString(18, praiseCount);
        }
 
        UserInfo helperUser = entity.getHelperUser();
        if (helperUser != null) {
            stmt.bindString(19, helperUserConverter.convertToDatabaseValue(helperUser));
        }
 
        String homePageUrl = entity.getHomePageUrl();
        if (homePageUrl != null) {
            stmt.bindString(20, homePageUrl);
        }
 
        String isForceVerify = entity.getIsForceVerify();
        if (isForceVerify != null) {
            stmt.bindString(21, isForceVerify);
        }
 
        String badgeCount = entity.getBadgeCount();
        if (badgeCount != null) {
            stmt.bindString(22, badgeCount);
        }
 
        UserInfo developerUser = entity.getDeveloperUser();
        if (developerUser != null) {
            stmt.bindString(23, developerUserConverter.convertToDatabaseValue(developerUser));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AppItemBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String appSecret = entity.getAppSecret();
        if (appSecret != null) {
            stmt.bindString(2, appSecret);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String categoryName = entity.getCategoryName();
        if (categoryName != null) {
            stmt.bindString(4, categoryName);
        }
 
        String categoryCode = entity.getCategoryCode();
        if (categoryCode != null) {
            stmt.bindString(5, categoryCode);
        }
 
        String appId = entity.getAppId();
        if (appId != null) {
            stmt.bindString(6, appId);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(7, iconUrl);
        }
        stmt.bindLong(8, entity.getIsShowTitle() ? 1L: 0L);
 
        String portalUrl = entity.getPortalUrl();
        if (portalUrl != null) {
            stmt.bindString(9, portalUrl);
        }
        stmt.bindLong(10, entity.getType());
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(11, imgUrl);
        }
        stmt.bindLong(12, entity.getSort());
        stmt.bindLong(13, entity.getScore());
 
        String introduce = entity.getIntroduce();
        if (introduce != null) {
            stmt.bindString(14, introduce);
        }
 
        List screenshotUrls = entity.getScreenshotUrls();
        if (screenshotUrls != null) {
            stmt.bindString(15, screenshotUrlsConverter.convertToDatabaseValue(screenshotUrls));
        }
 
        String hotCount = entity.getHotCount();
        if (hotCount != null) {
            stmt.bindString(16, hotCount);
        }
 
        String commentCount = entity.getCommentCount();
        if (commentCount != null) {
            stmt.bindString(17, commentCount);
        }
 
        String praiseCount = entity.getPraiseCount();
        if (praiseCount != null) {
            stmt.bindString(18, praiseCount);
        }
 
        UserInfo helperUser = entity.getHelperUser();
        if (helperUser != null) {
            stmt.bindString(19, helperUserConverter.convertToDatabaseValue(helperUser));
        }
 
        String homePageUrl = entity.getHomePageUrl();
        if (homePageUrl != null) {
            stmt.bindString(20, homePageUrl);
        }
 
        String isForceVerify = entity.getIsForceVerify();
        if (isForceVerify != null) {
            stmt.bindString(21, isForceVerify);
        }
 
        String badgeCount = entity.getBadgeCount();
        if (badgeCount != null) {
            stmt.bindString(22, badgeCount);
        }
 
        UserInfo developerUser = entity.getDeveloperUser();
        if (developerUser != null) {
            stmt.bindString(23, developerUserConverter.convertToDatabaseValue(developerUser));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AppItemBean readEntity(Cursor cursor, int offset) {
        AppItemBean entity = new AppItemBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // appSecret
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // categoryName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // categoryCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // appId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // iconUrl
            cursor.getShort(offset + 7) != 0, // isShowTitle
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // portalUrl
            cursor.getInt(offset + 9), // type
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // imgUrl
            cursor.getInt(offset + 11), // sort
            cursor.getInt(offset + 12), // score
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // introduce
            cursor.isNull(offset + 14) ? null : screenshotUrlsConverter.convertToEntityProperty(cursor.getString(offset + 14)), // screenshotUrls
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // hotCount
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // commentCount
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // praiseCount
            cursor.isNull(offset + 18) ? null : helperUserConverter.convertToEntityProperty(cursor.getString(offset + 18)), // helperUser
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // homePageUrl
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // isForceVerify
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // badgeCount
            cursor.isNull(offset + 22) ? null : developerUserConverter.convertToEntityProperty(cursor.getString(offset + 22)) // developerUser
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AppItemBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAppSecret(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCategoryName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCategoryCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAppId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIconUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsShowTitle(cursor.getShort(offset + 7) != 0);
        entity.setPortalUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setType(cursor.getInt(offset + 9));
        entity.setImgUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSort(cursor.getInt(offset + 11));
        entity.setScore(cursor.getInt(offset + 12));
        entity.setIntroduce(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setScreenshotUrls(cursor.isNull(offset + 14) ? null : screenshotUrlsConverter.convertToEntityProperty(cursor.getString(offset + 14)));
        entity.setHotCount(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCommentCount(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setPraiseCount(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setHelperUser(cursor.isNull(offset + 18) ? null : helperUserConverter.convertToEntityProperty(cursor.getString(offset + 18)));
        entity.setHomePageUrl(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setIsForceVerify(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setBadgeCount(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setDeveloperUser(cursor.isNull(offset + 22) ? null : developerUserConverter.convertToEntityProperty(cursor.getString(offset + 22)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AppItemBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AppItemBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AppItemBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
