package com.gome.core.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gome.work.core.model.converter.GroupNoticeConverter;
import com.gome.work.core.model.im.GroupNoticeBean;

import com.gome.work.core.model.im.GroupInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUP_INFO".
*/
public class GroupInfoDao extends AbstractDao<GroupInfo, Long> {

    public static final String TABLENAME = "GROUP_INFO";

    /**
     * Properties of entity GroupInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property GroupId = new Property(1, String.class, "groupId", false, "GROUP_ID");
        public final static Property UserId = new Property(2, long.class, "userId", false, "USER_ID");
        public final static Property GroupName = new Property(3, String.class, "groupName", false, "GROUP_NAME");
        public final static Property GroupInitName = new Property(4, String.class, "groupInitName", false, "GROUP_INIT_NAME");
        public final static Property Desc = new Property(5, String.class, "desc", false, "DESC");
        public final static Property Avatar = new Property(6, String.class, "avatar", false, "AVATAR");
        public final static Property Capacity = new Property(7, int.class, "capacity", false, "CAPACITY");
        public final static Property ExtraInfo = new Property(8, String.class, "extraInfo", false, "EXTRA_INFO");
        public final static Property TotalCount = new Property(9, long.class, "totalCount", false, "TOTAL_COUNT");
        public final static Property Status = new Property(10, int.class, "status", false, "STATUS");
        public final static Property FirstLetter = new Property(11, String.class, "firstLetter", false, "FIRST_LETTER");
        public final static Property GroupNotice = new Property(12, String.class, "groupNotice", false, "GROUP_NOTICE");
    }

    private final GroupNoticeConverter groupNoticeConverter = new GroupNoticeConverter();

    public GroupInfoDao(DaoConfig config) {
        super(config);
    }
    
    public GroupInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUP_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"GROUP_ID\" TEXT UNIQUE ," + // 1: groupId
                "\"USER_ID\" INTEGER NOT NULL ," + // 2: userId
                "\"GROUP_NAME\" TEXT," + // 3: groupName
                "\"GROUP_INIT_NAME\" TEXT," + // 4: groupInitName
                "\"DESC\" TEXT," + // 5: desc
                "\"AVATAR\" TEXT," + // 6: avatar
                "\"CAPACITY\" INTEGER NOT NULL ," + // 7: capacity
                "\"EXTRA_INFO\" TEXT," + // 8: extraInfo
                "\"TOTAL_COUNT\" INTEGER NOT NULL ," + // 9: totalCount
                "\"STATUS\" INTEGER NOT NULL ," + // 10: status
                "\"FIRST_LETTER\" TEXT," + // 11: firstLetter
                "\"GROUP_NOTICE\" TEXT);"); // 12: groupNotice
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUP_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroupInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(2, groupId);
        }
        stmt.bindLong(3, entity.getUserId());
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(4, groupName);
        }
 
        String groupInitName = entity.getGroupInitName();
        if (groupInitName != null) {
            stmt.bindString(5, groupInitName);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(6, desc);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(7, avatar);
        }
        stmt.bindLong(8, entity.getCapacity());
 
        String extraInfo = entity.getExtraInfo();
        if (extraInfo != null) {
            stmt.bindString(9, extraInfo);
        }
        stmt.bindLong(10, entity.getTotalCount());
        stmt.bindLong(11, entity.getStatus());
 
        String firstLetter = entity.getFirstLetter();
        if (firstLetter != null) {
            stmt.bindString(12, firstLetter);
        }
 
        GroupNoticeBean groupNotice = entity.getGroupNotice();
        if (groupNotice != null) {
            stmt.bindString(13, groupNoticeConverter.convertToDatabaseValue(groupNotice));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroupInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(2, groupId);
        }
        stmt.bindLong(3, entity.getUserId());
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(4, groupName);
        }
 
        String groupInitName = entity.getGroupInitName();
        if (groupInitName != null) {
            stmt.bindString(5, groupInitName);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(6, desc);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(7, avatar);
        }
        stmt.bindLong(8, entity.getCapacity());
 
        String extraInfo = entity.getExtraInfo();
        if (extraInfo != null) {
            stmt.bindString(9, extraInfo);
        }
        stmt.bindLong(10, entity.getTotalCount());
        stmt.bindLong(11, entity.getStatus());
 
        String firstLetter = entity.getFirstLetter();
        if (firstLetter != null) {
            stmt.bindString(12, firstLetter);
        }
 
        GroupNoticeBean groupNotice = entity.getGroupNotice();
        if (groupNotice != null) {
            stmt.bindString(13, groupNoticeConverter.convertToDatabaseValue(groupNotice));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GroupInfo readEntity(Cursor cursor, int offset) {
        GroupInfo entity = new GroupInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // groupId
            cursor.getLong(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // groupName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // groupInitName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // desc
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // avatar
            cursor.getInt(offset + 7), // capacity
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // extraInfo
            cursor.getLong(offset + 9), // totalCount
            cursor.getInt(offset + 10), // status
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // firstLetter
            cursor.isNull(offset + 12) ? null : groupNoticeConverter.convertToEntityProperty(cursor.getString(offset + 12)) // groupNotice
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GroupInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGroupId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.getLong(offset + 2));
        entity.setGroupName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGroupInitName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDesc(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAvatar(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCapacity(cursor.getInt(offset + 7));
        entity.setExtraInfo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTotalCount(cursor.getLong(offset + 9));
        entity.setStatus(cursor.getInt(offset + 10));
        entity.setFirstLetter(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setGroupNotice(cursor.isNull(offset + 12) ? null : groupNoticeConverter.convertToEntityProperty(cursor.getString(offset + 12)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GroupInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GroupInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GroupInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
