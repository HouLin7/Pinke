package com.gome.core.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gome.work.core.model.ScheduleTimeItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCHEDULE_TIME_ITEM".
*/
public class ScheduleTimeItemDao extends AbstractDao<ScheduleTimeItem, Integer> {

    public static final String TABLENAME = "SCHEDULE_TIME_ITEM";

    /**
     * Properties of entity ScheduleTimeItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", true, "ID");
        public final static Property StartTime = new Property(1, long.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(2, long.class, "endTime", false, "END_TIME");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property ColorValue = new Property(4, String.class, "colorValue", false, "COLOR_VALUE");
    }


    public ScheduleTimeItemDao(DaoConfig config) {
        super(config);
    }
    
    public ScheduleTimeItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCHEDULE_TIME_ITEM\" (" + //
                "\"ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"START_TIME\" INTEGER NOT NULL ," + // 1: startTime
                "\"END_TIME\" INTEGER NOT NULL ," + // 2: endTime
                "\"TITLE\" TEXT," + // 3: title
                "\"COLOR_VALUE\" TEXT);"); // 4: colorValue
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCHEDULE_TIME_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ScheduleTimeItem entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getStartTime());
        stmt.bindLong(3, entity.getEndTime());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String colorValue = entity.getColorValue();
        if (colorValue != null) {
            stmt.bindString(5, colorValue);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ScheduleTimeItem entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getStartTime());
        stmt.bindLong(3, entity.getEndTime());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String colorValue = entity.getColorValue();
        if (colorValue != null) {
            stmt.bindString(5, colorValue);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public ScheduleTimeItem readEntity(Cursor cursor, int offset) {
        ScheduleTimeItem entity = new ScheduleTimeItem( //
            cursor.getInt(offset + 0), // id
            cursor.getLong(offset + 1), // startTime
            cursor.getLong(offset + 2), // endTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // colorValue
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ScheduleTimeItem entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setStartTime(cursor.getLong(offset + 1));
        entity.setEndTime(cursor.getLong(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setColorValue(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(ScheduleTimeItem entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public Integer getKey(ScheduleTimeItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ScheduleTimeItem entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
