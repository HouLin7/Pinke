package com.gome.core.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gome.work.core.model.dao.FileUploadRecordInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FILE_UPLOAD_RECORD_INFO".
*/
public class FileUploadRecordInfoDao extends AbstractDao<FileUploadRecordInfo, Long> {

    public static final String TABLENAME = "FILE_UPLOAD_RECORD_INFO";

    /**
     * Properties of entity FileUploadRecordInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property State = new Property(1, String.class, "state", false, "STATE");
        public final static Property UpdateTime = new Property(2, long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property FilePath = new Property(3, String.class, "filePath", false, "FILE_PATH");
    }


    public FileUploadRecordInfoDao(DaoConfig config) {
        super(config);
    }
    
    public FileUploadRecordInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FILE_UPLOAD_RECORD_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"STATE\" TEXT," + // 1: state
                "\"UPDATE_TIME\" INTEGER NOT NULL ," + // 2: updateTime
                "\"FILE_PATH\" TEXT UNIQUE );"); // 3: filePath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FILE_UPLOAD_RECORD_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FileUploadRecordInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(2, state);
        }
        stmt.bindLong(3, entity.getUpdateTime());
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(4, filePath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FileUploadRecordInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(2, state);
        }
        stmt.bindLong(3, entity.getUpdateTime());
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(4, filePath);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FileUploadRecordInfo readEntity(Cursor cursor, int offset) {
        FileUploadRecordInfo entity = new FileUploadRecordInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // state
            cursor.getLong(offset + 2), // updateTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // filePath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FileUploadRecordInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setState(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUpdateTime(cursor.getLong(offset + 2));
        entity.setFilePath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FileUploadRecordInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FileUploadRecordInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FileUploadRecordInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
