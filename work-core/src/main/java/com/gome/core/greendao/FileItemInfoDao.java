package com.gome.core.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gome.work.core.model.dao.FileItemInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FILE_ITEM_INFO".
*/
public class FileItemInfoDao extends AbstractDao<FileItemInfo, Long> {

    public static final String TABLENAME = "FILE_ITEM_INFO";

    /**
     * Properties of entity FileItemInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property CreateDate = new Property(3, long.class, "createDate", false, "CREATE_DATE");
        public final static Property UpdateDate = new Property(4, long.class, "updateDate", false, "UPDATE_DATE");
        public final static Property FromSourceCode = new Property(5, String.class, "fromSourceCode", false, "FROM_SOURCE_CODE");
        public final static Property FromSourceName = new Property(6, String.class, "fromSourceName", false, "FROM_SOURCE_NAME");
        public final static Property ContentLength = new Property(7, long.class, "contentLength", false, "CONTENT_LENGTH");
        public final static Property Path = new Property(8, String.class, "path", false, "PATH");
    }


    public FileItemInfoDao(DaoConfig config) {
        super(config);
    }
    
    public FileItemInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FILE_ITEM_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"TYPE\" TEXT NOT NULL ," + // 2: type
                "\"CREATE_DATE\" INTEGER NOT NULL ," + // 3: createDate
                "\"UPDATE_DATE\" INTEGER NOT NULL ," + // 4: updateDate
                "\"FROM_SOURCE_CODE\" TEXT NOT NULL ," + // 5: fromSourceCode
                "\"FROM_SOURCE_NAME\" TEXT," + // 6: fromSourceName
                "\"CONTENT_LENGTH\" INTEGER NOT NULL ," + // 7: contentLength
                "\"PATH\" TEXT);"); // 8: path
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FILE_ITEM_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FileItemInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getType());
        stmt.bindLong(4, entity.getCreateDate());
        stmt.bindLong(5, entity.getUpdateDate());
        stmt.bindString(6, entity.getFromSourceCode());
 
        String fromSourceName = entity.getFromSourceName();
        if (fromSourceName != null) {
            stmt.bindString(7, fromSourceName);
        }
        stmt.bindLong(8, entity.getContentLength());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(9, path);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FileItemInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getType());
        stmt.bindLong(4, entity.getCreateDate());
        stmt.bindLong(5, entity.getUpdateDate());
        stmt.bindString(6, entity.getFromSourceCode());
 
        String fromSourceName = entity.getFromSourceName();
        if (fromSourceName != null) {
            stmt.bindString(7, fromSourceName);
        }
        stmt.bindLong(8, entity.getContentLength());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(9, path);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FileItemInfo readEntity(Cursor cursor, int offset) {
        FileItemInfo entity = new FileItemInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // type
            cursor.getLong(offset + 3), // createDate
            cursor.getLong(offset + 4), // updateDate
            cursor.getString(offset + 5), // fromSourceCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // fromSourceName
            cursor.getLong(offset + 7), // contentLength
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // path
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FileItemInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setType(cursor.getString(offset + 2));
        entity.setCreateDate(cursor.getLong(offset + 3));
        entity.setUpdateDate(cursor.getLong(offset + 4));
        entity.setFromSourceCode(cursor.getString(offset + 5));
        entity.setFromSourceName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setContentLength(cursor.getLong(offset + 7));
        entity.setPath(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FileItemInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FileItemInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FileItemInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
