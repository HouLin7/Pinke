package com.gome.core.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gome.work.core.model.im.ConversationInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONVERSATION_INFO".
*/
public class ConversationInfoDao extends AbstractDao<ConversationInfo, Long> {

    public static final String TABLENAME = "CONVERSATION_INFO";

    /**
     * Properties of entity ConversationInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ConversationId = new Property(1, String.class, "conversationId", false, "CONVERSATION_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property UnReadCount = new Property(4, int.class, "unReadCount", false, "UN_READ_COUNT");
        public final static Property UpdateTime = new Property(5, long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property Icon = new Property(6, String.class, "icon", false, "ICON");
        public final static Property IsShield = new Property(7, int.class, "isShield", false, "IS_SHIELD");
        public final static Property IsTop = new Property(8, int.class, "isTop", false, "IS_TOP");
        public final static Property MsgType = new Property(9, int.class, "msgType", false, "MSG_TYPE");
        public final static Property Extra = new Property(10, String.class, "extra", false, "EXTRA");
        public final static Property DataUseId = new Property(11, String.class, "dataUseId", false, "DATA_USE_ID");
    }


    public ConversationInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ConversationInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONVERSATION_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CONVERSATION_ID\" TEXT NOT NULL ," + // 1: conversationId
                "\"TITLE\" TEXT NOT NULL ," + // 2: title
                "\"CONTENT\" TEXT," + // 3: content
                "\"UN_READ_COUNT\" INTEGER NOT NULL ," + // 4: unReadCount
                "\"UPDATE_TIME\" INTEGER NOT NULL ," + // 5: updateTime
                "\"ICON\" TEXT," + // 6: icon
                "\"IS_SHIELD\" INTEGER NOT NULL ," + // 7: isShield
                "\"IS_TOP\" INTEGER NOT NULL ," + // 8: isTop
                "\"MSG_TYPE\" INTEGER NOT NULL ," + // 9: msgType
                "\"EXTRA\" TEXT," + // 10: extra
                "\"DATA_USE_ID\" TEXT NOT NULL );"); // 11: dataUseId
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_CONVERSATION_INFO_CONVERSATION_ID_DATA_USE_ID ON \"CONVERSATION_INFO\"" +
                " (\"CONVERSATION_ID\" ASC,\"DATA_USE_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONVERSATION_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ConversationInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getConversationId());
        stmt.bindString(3, entity.getTitle());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
        stmt.bindLong(5, entity.getUnReadCount());
        stmt.bindLong(6, entity.getUpdateTime());
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(7, icon);
        }
        stmt.bindLong(8, entity.getIsShield());
        stmt.bindLong(9, entity.getIsTop());
        stmt.bindLong(10, entity.getMsgType());
 
        String extra = entity.getExtra();
        if (extra != null) {
            stmt.bindString(11, extra);
        }
        stmt.bindString(12, entity.getDataUseId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ConversationInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getConversationId());
        stmt.bindString(3, entity.getTitle());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
        stmt.bindLong(5, entity.getUnReadCount());
        stmt.bindLong(6, entity.getUpdateTime());
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(7, icon);
        }
        stmt.bindLong(8, entity.getIsShield());
        stmt.bindLong(9, entity.getIsTop());
        stmt.bindLong(10, entity.getMsgType());
 
        String extra = entity.getExtra();
        if (extra != null) {
            stmt.bindString(11, extra);
        }
        stmt.bindString(12, entity.getDataUseId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ConversationInfo readEntity(Cursor cursor, int offset) {
        ConversationInfo entity = new ConversationInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // conversationId
            cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.getInt(offset + 4), // unReadCount
            cursor.getLong(offset + 5), // updateTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // icon
            cursor.getInt(offset + 7), // isShield
            cursor.getInt(offset + 8), // isTop
            cursor.getInt(offset + 9), // msgType
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // extra
            cursor.getString(offset + 11) // dataUseId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ConversationInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setConversationId(cursor.getString(offset + 1));
        entity.setTitle(cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUnReadCount(cursor.getInt(offset + 4));
        entity.setUpdateTime(cursor.getLong(offset + 5));
        entity.setIcon(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsShield(cursor.getInt(offset + 7));
        entity.setIsTop(cursor.getInt(offset + 8));
        entity.setMsgType(cursor.getInt(offset + 9));
        entity.setExtra(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDataUseId(cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ConversationInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ConversationInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ConversationInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
